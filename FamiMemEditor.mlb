P:0000:RESET:// $8000-BFFF : PRG-ROM (LOW) 領域\n// $C000-FFFF : PRG-ROM (HIGH) 領域\n///////////////////////////////////////////\n■ 変数\n $0000\n// 0:0000, 1:6000, 2:8000\n ボタン\n ルーチンで使用\n 8 bit の値を渡すのに使用\n 汎用\n 16 bit のアドレスを渡すのに使用\n 16 bit のアドレスを渡すのに使用\n $0200 : スプライトバッファ\n $0300 : BGバッファ (8行分)\n $0400 : BGバッファ (8行分)\n $0500\n $500-$53F\n $0600\n $0700\n■ 定数\n ボタン (一般のファミコンゲームとは逆になっているが、こちらが好み。)\n 上4行空けてカーソルを表示する際のオフセット値\n "0000:" の分を空けてカーソルを表示する際のオフセット値\n///////////////////////////////////////////\n macro\n///////////////////////////////////////////\n// 関数\n\n 電源投入後最初に実行\n\n IRQ禁止セット・BDCクリア
P:0002::\n スタック初期化
P:0005::\n PPU初期化
P:0007:: NMI を無効化
P:000A:: 描画を無効化
P:000D:: DMC IRQ有効ビット をクリア
P:0010::\n APU ﾌﾚｰﾑｶｳﾝﾀｰIRQ禁止ビット セット
P:0015::	\n メモリ初期化
P:0032::\n VBlank 待機
P:003C::\n パレット読込
P:0053::\n スクロール設定\n X座標
P:0058:: Y座標
P:005D::\n 0番スプライト カーソル\n キャラ番号
P:0065::\n PPU 有効化・NMI はそのまま\n 赤 緑 青 SP BG cS cB 色
P:006A::lda #%10000000 ; NMI ? SPsize BGbase SPbase BG縦横 MainScreen(2bit)\nsta $2000
P:0070:MainLoop:\n メインループ
P:0076::\n 処理
P:007C::\n テスト
P:0082::\n 描画	
P:008F:SelectRoutine:\n ボタンの組み合わせによって、実行するルーチンを分岐させる\n\n 離された【次フレーム】に padMode をリセット
P:0099:: _padMode に値をセット\n 十字キー : 5, A B select start : 1 2 3 4
P:00B4::\n padMode に応じて分岐
P:00B6:: dw 配列を読むので 2 倍しておく
P:00C6:DATA_SelectRoutine: A:1, B:2, start:3, select:4, 十字キー:5\n - A B -
P:00CA:: e - - -     
P:00CE:: S - - -   
P:00D2:: - - - -  
P:00D6:DATA_SelectRoutine_func
P:00E0:: 5:十時キー
P:00E2:GetJoyPad:\n///////////////////////////////////////////\n コントローラーの情報を取得\n	pad1+0 : 現在の状態\n	pad1+1 : 押した瞬間\n	pad1+2 : 離した瞬間\n	pad1+3 : 1フレーム前 \n\n 1フレーム前のボタン情報を保存
P:00EA::\n ボタン取得 [A B select start ↑ ↓ ← →]
P:00F6:: 1P
P:00FC:: 2P
P:0105::\n ボタン計算 (押した瞬間・離した瞬間 の算出)
P:011D:: インデックス計算
P:0123:Get8Direction
P:0130:DATA_Get8Direction
P:0140:EditHex:\n 0 - 15 を取得
P:014D::\n 十時キーを押していない, A B 押していない場合 return
P:0150::\n 初回時 上位バイト4bit化
P:0152:: 初回
P:0159::\n カーソル選択中アドレスに書き込む
P:0167:: 初回
P:016E:: 2回目
P:0179:: 2回目
P:0182:DATA_EditHex: 十時キーのみ (Return)
P:018A:: A + 十時キー
P:0192:: B + 十時キー
P:019A:: AB + 十時キー, 十時キー押していない (Return)
P:01A2:MoveCursor:_x, _y の変更
P:01C6::\n _is_Hex_Changing を初期化
P:01D1:CalcCursor:\n x 正規化
P:01E3::\n y 正規化
P:01E9::\n y, x カーソル座標 算出
P:01EF:: 表示調整オフセットを足す
P:01F3:: スプライトは下に 1pxcel ずれる。さらに調整
P:0205::\n カーソル処理\n Y座標
P:020A:: X座標
P:020F::\n カレントアドレス計算
P:0217:: _y * 4
P:021B:: + _x
P:022C:ChangeBaseAddr: base アドレスの変更
P:0260:: _BaseOfsIdx < 3 のときスキップ
P:0276:: Base を既定アドレスに変更
P:0283:DATA_ChangeBaseAddr: 下バイトは全部 $00 なので、上だけで良い.
P:0286:Exec: 実行\n\n A,X,Y のクリア
P:0292:OtherFunc:\n コピペ, 設定画面など\n\n 初回押下時, カーソルアドレスを保存
P:029F::\n 離し時、コピーを実行
P:02AC::\n 十時入力に応じた処理を実行
P:02C7:StoreCursorAddr
P:02C9:: 行頭からコピー
P:02CD:: 行末へ
P:02DC:CopySelectRange
P:02FC:SelectRangeU
P:030A:SelectRangeD
P:031A:SelectPaste
P:0335:calc_SelectRenge:\n コピー範囲算出
P:033C::\n 逆方向選択時
P:033E::\n 符号反転(xor #$FF + 1)
P:0345::\n dst を _selectAddr へ変更
P:0350:DATA_OtherFuncTable
P:0360:nonefunc
P:0361:DrawInitialize: 描画関係\n\n 事前描画 (タイトル)
P:03A9::\n 描画
P:0401::\n メモリの後始末\n SRCA はアドレスではなく、値として使用. memset の N は 0 指定で 256 扱い.
P:0430:DATA_TITLE: memcpy32 に渡す値
P:0451:DATA_HELP
P:0492::.hex 5354415254203AB9F62D26F82DBCC42020202020202020202020202020202020
P:04D2:DATA_Register
P:0553:DrawHex16Lines: #$2081, _base
P:0566:: 次のアドレス\n #$2181
P:056F:: #$2181, _base+$20
P:0573:DrawHex8Lines: _ADDR_ : Nametable\n _SRCA_ : _base\n _MM_ : 破壊
P:057F:: 退避
P:0587:: 準備
P:058F::	SET_SRCA_PTR _base ; 引数で入力済み
P:0592:: 描画\n ★ #$2081 [2回目:#$2181]
P:05B2:memset:///////////////////////////////////////////\n 汎用関数\n _ADDR_ : 対象アドレス\n _SRCR_ : 値 (アドレスではない)\n _N_ : サイズ (0-255)
P:05C0:memcpy: _ADDR_ : 対象アドレス\n _SRCA_ : ソースアドレス\n _N_ : サイズ
P:05D0:memcpy32: _ADDR_ : 対象アドレス\n _SRCA_ : ソースアドレス\n _N_ : サイズ (32バイト単位) (0 の場合 256 扱い)
P:06AB:add_16_ADDR: _ADDR_ : 対象\n _N_ : 足す数
P:06B7:add_16_SRCA: _ADDR_ : \n _N_ : 足す数
P:06C3:DrawScrollZero: X座標
P:06C8:: Y座標
P:06CE:BufDraw_addr_hex_32x8: _ADDR_ : 対象バッファ\n _SRCA_ : ソースメモリ
P:06E5::(+5)
P:06E8::(+12)
P:0710:BufDraw_addr_2bytes: _ADDR_ : 書き込みアドレス (!! 返却 : +5 !!)\n _SRCA_ : 直接読みこみ文字列化する
P:0715::\n 0000 (アドレス部分)
P:0731:: ':'
P:0744:BufDraw_hex_4bytes: 4バイト分実行 (00 00 00 00 )\n _ADDR_ : 書き込み先アドレス (!! 返却 : +12 !!)\n _SRCA_ : 読みこみアドレス
P:0769:bin2hex: 説明 : _N_ の値を ASCII 2バイトに変換し、指定アドレスに書き込む。\n _ADDR_ : 指定アドレス\n _N_  : 値 
P:0788:DATA_BIN2HEX
P:0798:Draw8Lines:///////////////////////////////////////////\n _ADDR_ : NAMETABLE\n バランス ver\n MEM_BG の インデックス\n 最大速度ver
P:0DA3:DrawXLines: _ADDR_ : NameTable\n _SRCA_ : MEM_BG\n _N_    : 行数 (最大:約6行)
P:0DB3:: MEM_BG の インデックス
P:0E83:Draw1Sprite: _N_ : spr id
P:0E8C:: インデックスを計算
P:0E8D:: Y座標
P:0E93:: キャラ番号
P:0E99:: 反転・優先順位
P:0E9F:: X座標
P:0EA8:DrawAllSprites
P:0EAE:One2Handlet:///////////////////////////////////////////\n https://www.wizforest.com/tech/Z80vs6502/;p1#LoopAdd
P:0EB6:: 2
P:0EB8:: 3
P:0EBA:: 2
P:0EBC:: 2
P:0EBD:: 2
P:0EBE:: 3
P:0EC0:: 3 / 2
P:0EC2:: 2
P:0EC3:: 2
P:0EC4:: 5
P:0EC6:: 3 / 2
P:0EC8:: 3
P:0ECA:: 3
P:0ECD:NMI:///////////////////////////////////////////
P:0ED2::\n 処理
P:0ED9:BREAK:///////////////////////////////////////////
P:0EDE::\n ■ rti 戻り先補正\n BREAK 命令の戻りアドレスは +1 される.\n 補正のため, スタック5番目のPC下位バイトに対し dec する.\n 参考図 : [ y, x, a, P, <PC0>, PC1 ]
P:0EF0:DrawRegisters:///////////////////////////////////////////
P:0EF1:: パレットはここに配置しておく
P:3FD0:PALLET
R:00D0:_y
R:00D1:_y_View
R:00D2:_x
R:00D3:_x_View
R:00D4:_base
R:00D5:_base1
R:00D6:_curaddr
R:00D7:_curaddr1
R:00D8:_BaseOfsIdx
R:00D9:_padMode
R:00DA:_is_Hex_Changing
R:00DB:_is_need_AllDraw
R:00DC:_count
R:00DD:_count1
R:00DE:_pad1dir8
R:00DF:_reserve
R:00E0:_curaddrStore
R:00E1:_curaddrStore1
R:00E2:_selectAddr
R:00E3:_selectAddr1
R:00E4:_selectN
R:00E5:_is_pasted
R:00E6:_select_y
R:00F0:_pad1
R:00F1:_pad11
R:00F2:_pad12
R:00F3:_pad13
R:00F4:_pad2
R:00F5:_pad21
R:00F6:_pad22
R:00F7:_pad23
R:00F8:_N_
R:00F9:_N1_
R:00FA:_MM_
R:00FB:_MM1_
R:00FC:_ADDR_
R:00FD:_ADDR1_
R:00FE:_SRCA_
R:00FF:_SRCA1_
R:0500:_copy_buf
R:0100:i
G:C000:MEM_BG
G:C000:MEM_BG1
G:C000:MEM_BG10
G:C000:MEM_BG11
G:C000:MEM_BG12
G:C000:MEM_BG13
G:C000:MEM_BG14
G:C000:MEM_BG15
G:C000:MEM_BG2
G:C000:MEM_BG3
G:C000:MEM_BG4
G:C000:MEM_BG5
G:C000:MEM_BG6
G:C000:MEM_BG7
G:C000:MEM_BG8
G:C000:MEM_BG9
G:C000:MEM_SP
G:C000:SRAM
G:C000:X_OFS
G:C000:Y_OFS
G:C000:pad_A
G:C000:pad_B
G:C000:pad_Down
G:C000:pad_Left
G:C000:pad_Right
G:C000:pad_Up
G:C000:pad_select
G:C000:pad_start
G:C57F:MM
G:CEEA:ADDR
G:CEEA:N
G:CEEA:SRCA
G:CEEA:X
G:CEEA:Y
